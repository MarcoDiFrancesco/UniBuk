openapi: '3.0.2'
info:
  version: '1.0.0'
  title: UniBuk
  description: We need to develop an online service for e-commerce that will allow University students to sell, buy and search for used books, notes and resources. We want to deliver a web version of this service and a client application.
  contact:
    name: 'team #10'
    url: 'https://github.com/Pappol/UniBuk'

paths: 
  
  /users/signup:
    
    post: 
      description: Creates a new user in the database
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '409':
          description: Mail altrady exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 409
                message: Mail exists
        '500':
          $ref: '#/components/responses/DbError'
          
  /user/login:
    
    post:
      description: Control if an user already exists in the database
      requestBody:
        required: true
        content:
          applicationn/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                  example: mymail@example.com
                password:
                  type: string
                  example: jyclkvadjhvs
              required:
                - email
                - password
      responses:
        '200':
          $ref: '#/components/responses/AuthSuccessful'
        '401':
          $ref: '#/components/responses/AuthFailed'
        '500':
          $ref: '#/components/responses/DbError'
  
  /users/{id}:
  
    get: 
      description: Obtain information about a specific user
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the user
          schema: 
            type: string
            example: mongoose auto generated
      responses:
        '200':
          description: Success pull of one user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/DbError'
          
    delete:
      description: Delete a specific user from the database
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the user
          schema: 
            type: string
            example: mongoose auto generated
      responses:
        '200':
          description: Success delete of one user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              example:
                code: 200
                message: user deleted
        '500':
          $ref: '#/components/responses/DbError'
  
  /books:
  
    get:
      description: Obtain the information of the books in our database
      responses: 
        '200':
          description: Successful pull of all the books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Books'
        '500':
          $ref: '#/components/responses/DbError'
  
  /books/{id}:
  
    get: 
      description: Obtain information about a specific book
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the book
          schema:
            type: string
            example: mongose auto generated
      responses:
        '200':
          description: Successful pull of one book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/DbError'
  
  /contents:
  
    get:
      description: Obtain the information of the contents in the database
      responses:
        '200':
          description: Successufl pull of all the contents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contents'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/DbError'
    
    post:
      description: Insert a new content in the database
      responses:
        '201': 
          $ref: '#/components/responses/Created'
        '500':
          $ref: '#/components/responses/DbError'
  
  /contents/{id}:
    
    get:
      description: Obtain information about a specific content
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the book
          schema:
            type: string
            example: mongose auto generated
      responses:
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/DbError'
    
    patch:
      description: Change the content of a specific content
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the book
          schema:
            type: string
            example: mongose auto generated
      responses:
        '404':
            $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/DbError'
    
    delete:
      description: Delete a specific content from the database
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the book
          schema:
            type: string
            example: mongose auto generated
      responses:
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/DbError'
    
components:
  schemas:
  
    Success:
      description: Model containing the success response
      type: object
      properties:
        code: 
          type: number
        message:
          type: string
      required:
        - code
        - message
  
    Error:
      description: Model containing the error response
      type: object
      properties:
        code: 
          type: number
        message:
          type: string
      required:
        - code
        - message
    
    Users:
      description: An array of users info
      type: array
      items:
        $ref: '#/components/schemas/User'
    
    User:
      description: Model containing user info
      type: object
      properties:
        _id: 
          type: string
          example: mongoose auto generated
        email:
          type: string
          example: myemali@example.com
        password:
          type: string
          example: lihv9wflnns
        studentCreeds:
          type: object
          properties:
            university: 
              type: string
              example: University of Trento
            course:
              type: string
              example: SE II
            year: 
              type: number
              example: 3
        verified:
          type: boolean
          example: true
        contents:
            $ref: '#/components/schemas/Contents'
        favourites:
          type: array
          items:
            type: object
            properties:
            #leggermente cambiate da quelle di pips
              favContent:
                $ref: '#/components/schemas/Contents'
              favBooks:
                $ref: '#/components/schemas/Book'
      required:
        - _id
        - email
        - password
          
    Books:
      description: Array of books info
      type: array
      items:
        $ref: '#/components/schemas/Book'
    
    Book:
      description: Model containing book info
      type: object
      properties:
        _id: 
          type: string
          example: mongoose auto generated
        isbn:
          type: number
          example: 80000635513238000034
        title:
          type: string
          example: Dragon Book
        author:
          type: string
          example: Gigi
        year:
          type: number
          example: 1987
        editor:
          type: string
          example: Mondadori
        validFor:
          type: array
          items:
           $ref: '#/components/schemas/ValidFor'
        #questa non l'ho capita (sono i content relativi a quel libro?)
        contents:
            $ref: '#/components/schemas/Contents'
      required:
        - _id
        - isbn
        - title
        - author
        - year
        - editor
    
    Contents: 
      description: Array of contents info
      type: array
      items:
        $ref: '#/components/schemas/Content'
    
    Content:
      description: Model containing a content info (paper, software... but NOT a book)
      type: object
      properties:
        _id:
          type: string
          example: mongoose auto generated
        name:
          type: string
          example: Dispensa Calcolatori
        url:
          type: number
          example: 429426
        validFor:
          type: array
          items:
            $ref: '#/components/schemas/ValidFor'
        books:
          $ref: '#/components/schemas/Books'
            
    
    ValidFor:
      description: Model of the validity location of a resource
      type: object
      properties:
        university:
          type: string
          example: University of Trento
        course:
          type: string
          example: LFC

  responses:
  
    Found:
      description:  Element not found in the database
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example: 
            code: 200
            message: found
    
    Created:
      description:  Element add in the database
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example: 
            code: 201
            message: add
    
    AuthSuccessful:
      description:  Login authorizathion success
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example: 
            code: 200
            message: Authorized

    NotFound:
      description: Element not found in the database
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example: 
            code: 404
            message: No valid entry found for provided ID
            
    DbError:
      description: Error in accessing the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example: 
            code: 500
            message: unable to handle this request
      
    AuthFailed:
      description: Login authorizathion failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example: 
            code: 401
            message: wrong username or password