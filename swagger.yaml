openapi: '3.0.2'
info:
  version: '2.0.0'
  title: UniBuk
  description: We need to develop an online service for University book suggestions and content sharing that will allow University students ton get information about  books, notes and resources they can use in their courses, as well as donwload contents shared by other users. We want to deliver a web version of this service and a client application.
  contact:
    name: 'team #10'
    url: 'https://github.com/Pappol/UniBuk'

paths: 
  
  /user/signup:
    
    post: 
      description: Creates a new user in the database
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                password: 
                  type: string
                username: 
                  type: string
                firstName: 
                  type: string
                lastName: 
                  type: string
      responses:
        '201':
          description: success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: user created
        '409':
          description: Mail altrady exists
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: mail exists
        '500':
          description: dabase error
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
        '501':
          description: password hashing error
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: hashing error type
          
  /user/login:
    
    post:
      description: Control if an user already exists in the database
      requestBody:
        required: true
        content:
          applicationn/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                  example: mymail@example.com
                password:
                  type: string
                  example: jyclkvadjhvs
              required:
                - email
                - password
      responses:
        '200':
          description: login success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                  id:
                    type: string
                  message:
                    type: string
                required:
                  - code
                  - message
              example: 
                token: yqw98q48y9w4fyp9gy4hrvpr89hqp484qgfg p9qgf4
                message: Auth Successful
                id: 5fab15fdd9fe8e536c4df414
        '401':
          description: wrong credentials
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Auth failed
        '402':
          description: error in compairing password with hash
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Auth failed
        '403':
          description: user doesn't exists
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Auth failed
        '500':
          description: database error
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
  
  /user/{id}:
  
    get: 
      description: Obtain information about a specific user
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the user
          schema: 
            type: string
            example: mongoose auto generated
      responses:
        '200':
          description: Successful pull of one user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user with this id doesn't exists 
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: No valid entry found for provided ID
        '500':
          description: find failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type

    patch:
      description: Edits a specific user from the database
      requestBody:
        required: true
        content:
          applicationn/json:
            schema:
              type: array
              items: 
                type: object
                properties:
                  propName:
                    type: string
                    example: username
                  value:
                    type: object #could be other than object (object is the most generic allowed)
                    example: salt bae
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the user
          schema:
            type: string
            example: mongoose auto generated
      responses:
        '200':
          description: user update
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example: 
                message: User updated
        '500':
          description: update failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type

    delete:
      description: Delete a specific user from the database
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the user
          schema: 
            type: string
            example: mongoose auto generated
      responses:
        '200':
          description: user delete
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example: 
                message: User deleted
        '500':
          description: update failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
  
  /books:
  
    get:
      description: Obtain the information of all the books in our database
      responses: 
        '200':
          description: Successful pull of all the books
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: 
                    type: number
                    example: 1
                  books: 
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '500':
          description: find failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
  
  /books/{id}:
  
    get: 
      description: Obtain information about a specific book
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the book
          schema:
            type: string
            example: mongose auto generated
      responses:
        '200':
          description: Successful pull of one book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: book with this id doesn't exists 
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: No valid entry found for provided ID
        '500':
          description: find failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type

    patch:
      description: Update a book information; useful for adding a new comment/review to a book with provided {id}
      requestBody:
        required: true
        content:
          applicationn/json:
            schema:
              type: array
              items: 
                type: object
                properties:
                  propName:
                    type: string
                    example: username
                  value:
                    type: object #could be other than object (object is the most generic allowed)
                    example: salt bae
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the book
          schema:
            type: string
            example: mongoose auto generated
      responses:
        '200':
          description: The book has been successfully updated
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example: 
                message: book updated
        '500':
          description: update failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
                    
  /books/{bId}/questions/{qId}:
    patch:
      description: Add an answer to a question {id} for a book with provided {id}
      requestBody:
        required: true
        content:
          applicationn/json:
            schema:
              type: object
              properties:
                text: 
                  type: string
                  example: tranquillo, è molto buono
      parameters:
        - in: path
          name: bId
          required: true
          description: The id of the book
          schema:
            type: string
            example: mongoose auto generated
        - in: path
          name: qId
          required: true
          description: The id of the question
          schema:
            type: string
            example: mongoose auto generated
      responses:
        '200':
          description: Review has been successfully added
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example: 
                message: Added answer
        '500':
          description: update failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
  
  /contents:
  
    get:
      description: Obtain the information of the contents in the database
      responses:
        '200':
          description: Successful pull of one book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '404':
          description: content with this id doesn't exists 
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: No valid entry found for provided ID
        '500':
          description: find failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type

    post: 
      description: Creates a new content in the database
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                creator: 
                  type: string
                date: 
                  type: number
                name: 
                  type: string
                url: 
                  type: string
                dscription: 
                  type: string
                image:
                  type: string
      responses:
        '201':
          description: success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Content created
        '409':
          description: Mail altrady exists
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Content with that name already exists
        '500':
          description: dabase error
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
  
  /contents/{id}:
    
    get:
      description: Obtain information about a specific content
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the book
          schema:
            type: string
            example: mongose auto generated
      responses:
        '200':
          description: Successful pull of one content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '404':
          description: content with this id doesn't exists 
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: No valid entry found for provided ID
        '500':
          description: find failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
    patch:
      description: Update a content information; useful for adding a new comment/review to a content with provided {id}
      requestBody:
        required: true
        content:
          applicationn/json:
            schema:
              type: array
              items: 
                type: object
                properties:
                  propName:
                    type: string
                    example: username
                  value:
                    type: object #could be other than object (object is the most generic allowed)
                    example: salt bae
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the content
          schema:
            type: string
            example: mongoose auto generated
      responses:
        '200':
          description: The content has been successfully updated
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example: 
                message: content updated
        '500':
          description: update failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
                    
  /contents/{cId}/questions/{qId}:
    patch:
      description: Add an answer to a question {id} for a content with provided {id}
      requestBody:
        required: true
        content:
          applicationn/json:
            schema:
              type: object
              properties:
                text: 
                  type: string
                  example: tranquillo, è molto buono
      parameters:
        - in: path
          name: cId
          required: true
          description: The id of the content
          schema:
            type: string
            example: mongoose auto generated
        - in: path
          name: qId
          required: true
          description: The id of the question
          schema:
            type: string
            example: mongoose auto generated
      responses:
        '200':
          description: Review has been successfully added
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example: 
                message: Added answer
        '500':
          description: update failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
    
    patch:
      description: Edits a specific content from the database
      requestBody:
        required: true
        content:
          applicationn/json:
            schema:
              type: array
              items: 
                type: object
                properties:
                  propName:
                    type: string
                    example: name
                  value:
                    type: object #could be other than object (object is the most generic allowed)
                    example: the best paper of the world
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the content
          schema:
            type: string
            example: mongoose auto generated
      responses:
        '200':
          description: content update
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example: 
                message: Content updated
        '500':
          description: update failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: database error type
    
#    delete:
#      description: Delete a specific content from the database
#      parameters:
#        - in: path
#          name: id
#          required: true
#          description: The id of the book
#          schema:
#            type: string
#            example: mongose auto generated
#      responses:
#        '404':
#          $ref: '#/components/responses/NotFound'
#        '500':
#          $ref: '#/components/responses/DbError'

  /search/{query}:
  
    get:
      description: Find the books, contents and users
      parameters:
        - in: path
          name: query
          required: true
          description: Any field of content, book or user except for password and objects keys
          schema:
            type: string
            example: myBook
      responses:
        '200':
          description: Successful pull of one content
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Content'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '500':
          description: search failed in the database
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: database error type
    
components:
  schemas:
    
    User:
      description: Model containing user info
      type: object
      properties:
        _id: 
          type: string
          example: mongoose auto generated
        email:
          type: string
          example: myemali@example.com
        username:
          type: string
          example: th3h4ck3r
        firstName:
          type: string
          example: Mario
        lastName:
          type: string
          example: Rossi
        password:
          type: string
          example: lihv9wflnns
        studentCreeds:
          type: object
          properties:
            university: 
              type: string
              example: University of Trento
            course:
              type: string
              example: SE II
            year: 
              type: number
              example: 3
        verified:
          type: boolean
          example: true
        contents:
          type: array
          items:
            $ref: '#/components/schemas/Content'
        favourites:
          type: array
          items:
            type: object
            properties:
              content:
                $ref: '#/components/schemas/Content'
              book:
                $ref: '#/components/schemas/Book'
        contacts:
          type: array
          items:
            type: string
            example: www.github.com/RossiMario
      required:
        - _id
        - email
        - username
        - firstName
        - lastName
        - password
    
    Book:
      description: Model containing book info
      type: object
      properties:
        _id: 
          type: string
          example: mongoose auto generated
        isbn:
          type: string
          example: '80000635513238000034'
        title:
          type: string
          example: Dragon Book
        author:
          type: string
          example: Gigi
        year:
          type: number
          example: 1987
        editor:
          type: string
          example: Mondadori
        description:
          type: string
          example: the storic book for LFC course
        image:
          type: string
          example: /uploads/books/photo.jpg
        validFor:
          type: array
          items:
            type: object
            properties:
              university:
                type: string
                example: University of Trento
              course:
                type: string
                example: LFC
        contents:
          type: array
          items:
            $ref: '#/components/schemas/Content'
        tags:
          type: array
          items:
            type: string
            example: LFC
        comments:
          type: array
          items:
            type: object
            properties:
              rank: 
                type: number
                example: 4
              text: 
                type: string
                example: so useful!!
              author:
                $ref: '#/components/schemas/User'
        questions:
          type: array
          items: 
            type: object
            properties:
              quest:
                type: string
                example: Quande pagine ha?
              answers:
                type: array
                items:
                  type: string
                  example: non troppe dai
      required:
        - _id
        - isbn
        - title
        - author
        - year
        - editor
        - description
        - image
    
    Content:
      description: Model containing a content info (paper, software... but NOT a book)
      type: object
      properties:
        _id:
          type: string
          example: mongoose auto generated
        creator:
          $ref: '#/components/schemas/User'
        date:
          type: number
          example: 17.11.2020
        name:
          type: string
          example: Dispensa Calcolatori
        url:
          type: string
          example: https://github.com/filippodaniotti/Appunti-LFC
        description:
          type: string
          example: How to beat Calcolatori @UniTN
        image:
          type: string
          example: imgurl.com/contentphoto
        validFor:
          type: array
          items:
            type: object
            properties:
              university:
                type: string
                example: University of Trento
              course:
                type: string
                example: LFC
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        tags: 
          type: array
          items:
            type: string
            example: Calcolatori
        comments:
          type: array
          items:
            type: object
            properties:
              rank: 
                type: number
                example: 4
              text: 
                type: string
                example: so useful!!
              author:
                $ref: '#/components/schemas/User' 
        questions:
          type: array
          items: 
            type: object
            properties:
              quest:
                type: string
                example: Quande pagine ha?
              answers:
                type: array
                items:
                  type: string
                  example: non troppe dai
      required:
        - _id
        - creator
        - date
        - name
        - url
        - description
        - image